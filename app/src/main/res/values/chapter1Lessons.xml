<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string-array name="lesson101">
        <item>Getting Started</item>
        <item><![CDATA["
            <p>To start learning, you'll first have to install Java. For beginners, an IDE is also recommended. This is what you'll do in this lesson: </p><p><a href="101_2">1. Download and Install Java</a></p><p><a href="101_4">2. Get an IDE (Eclipse)</a></p><p><a href="101_5">3. Learn how to create a new Project in Eclipse</a></p><p>In the following sections, you will be guided step by step on how to do these. Tap <font color="#123456">next</font> to get started!</p>
        "]]></item>

        <item>Downloading and Installing Java</item>
        <item><![CDATA["
            <p>We'll start by downloading and installing Java. This tutorial applies for computers running <font color="#009900">Windows x64</font>. You'll download <font color="orange"><b>Java SE Development Kit 8</b></font>. </p><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">1. Go to the Java download web page</a><br>2. Select <i>Accept License Agreement</i><br>3. Click on the filename <font color="#009900">jdk-8u191-windows-x64.exe</font> (click the red down arrow)<br>4. Run the downloaded executable and follow the onscreen instructions.</p><p>Java will now be installed on your computer.</p><p>In the next section, you'll also learn how to download and install an IDE. An <b><font color="#123456">Integrated Development Environment</font></b> is recommended for beginners. </p>
        "]]>
        </item>

        <item>Integrated Development Environment IDE</item>
        <item><![CDATA["
            <p>An <i>Integrated Development Environment</i> (IDE) is a software that makes writing programs easier. You get syntax highlighting, code suggestions, your code is validated as you type and building and running your program is faster and easier. For beginners, these features are very helpful in the learning process.</p><p>For <i>Java</i> development we are going to use <font color="orange"><b>Eclipse</b></font>. Eclipse is currently one of the most popular IDEs and possibly the most used one at the time of writing this.</p><p>So let's download and install it. Remember, we are downloading the version for <font color="#009900">Windows x64</font>. Tap next to continue.</p>
        "]]>
        </item>

        <item>Getting Eclipse</item>
        <item><![CDATA["
            <p>First, go to the <a href="https://eclipse.org/downloads/">Eclipse download page</a>. You can easily access the download page by typing <font color="#123456"><i>eclipse.org/downloads</i></font> in your browser's bar.</p><p>Click the orange <font color="#830"><i>Download</i></font> button. Another page might open and you might have to click the <i>Download</i> button once again. After the setup file has finished downloading, run it.</p><p>Once the EclipseInstaller window appears, choose the <font color="purple"><b>Eclipse IDE for Java Developers</b></font> option. Afterwards, you can click the <b>INSTALL</b> button. During installation you might have to click <i>Accept</i> a couple of times.</p>
        "]]>
        </item>

        <item>Using Eclipse</item>
        <item><![CDATA["
            <p>Everything is now set! You are ready to start programming in Java. In the next lesson you are going to write your first Java program.</p><p>Before doing that, let's learn how to use Eclipse. Go ahead and run Eclipse. You will be asked about providing a <i>workspace</i> directory. You can leave that as it is and click the <b>Launch</b> button.</p><p>Once the Eclipse IDE opens, go to <b>File &gt; New &gt; Java Project</b>. In the window that opens, you have to write a <i>Project Name</i> (eg.: MyProject) and click the <b>Finish</b> button.</p><p>Now that you created a <font color="#990000">Project</font>, you need to create a <font color="#990000"><i>Class</i></font>.</p>
        "]]>
        </item>

        <item>Creating a class</item>
        <item><![CDATA["
            <p>Every project must contain at least one class. For now, your projects will contain only one class. In this class you will write your program code. This might be confusing for now. That's OK.</p><p>To create a class for your project go to <br><b>File &gt; New &gt; Class</b><br>. In the window that opens, enter the <i>Name</i> of the class(eg.: MyFirstProgram) and the <i>Source folder</i> which is going to be <font color="#990000"><i>MyProject/src</i></font> and leave everything else as it is. Click <b>Finish</b>.</p><p>You have now created a class in which you can write code. In the next lesson, we will write a simple Java program. See you there!</p>
        "]]>
        </item>
    </string-array>

    <string-array name="lesson102">
        <item>Time to code</item>
        <item><![CDATA["
            <p>Let's start with the most basic program you can write: the <font bgcolor="green">Hello World</font> program. Create a new project with one class named <font color="#987654"><i>MyFirstApp</i></font>. Don't know how to do that? Check <a href="101_5">lesson 1 on how to create a project</a></p>
            <p>You should now be able to write code inside the <font color="#987654"><em>MyFirstApp</em></font> class. Write the following code:</p>
            <p>
            <font color="#008000">public class</font> <font color="#1aa3ff"><em>MyFirstApp</em></font> { <br>
            &nbsp;&nbsp;&nbsp;<font color="#008000">public static</font> <font color="#B00040">void</font> <font color="#1aa3ff"><em>main</em></font>(<font color="black">String</font>[] <font color="#a300cc">args</font>) { <br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println( <font color="#a300cc">\"Hello World!\"</font> ); <br>
            &nbsp;&nbsp;&nbsp;}<br>
            }
            </p>
            <p>In the next sections we will run the program and then explain what every line does.</p>
        "]]></item>

        <item>Run your program</item>
        <item><![CDATA["
            <p>In order to run this program just click the green button at the top. Alternatively, you can use the menu at top. Click <b>Run &gt; Run</b> (or press CTRL+F11)</p>

            <p>If a dialog appears asking you to save, click <b>OK</b>. The program will now execute. You should see the words <font color="#555">"Hello World!"</font> around the bottom area of Eclipse</p>

            <p>If there were <font color="red"><em>errors</em></font> in your code, a dialog will show up, warning you about them. Go <a href="102_1">back</a> and check that you didn't misspell anything in your code.</p>
        "]]></item>

        <item>What does it do?</item>
        <item><![CDATA["
            <p>Let's see what every line of code does:</p>
            <p>The first line of code: <br><font color="#008000">public class</font> <font color="#1aa3ff"><em>MyFirstApp</em></font></p>
            <p>This line declares a <font color="#008000">class</font> named <font color="#1aa3ff"><em>MyFirstApp</em></font> and makes it <font color="#008000">public</font>.</p>
            <p>
            What is a class and a public class? For now, that is not important. All programs in Java run inside a class so we'll have write them like this. You'll learn about what classes are in <a href="301">Chapter III</a>.</p>
        "]]></item>

        <item>The main function</item>
        <item ><![CDATA["
            <p>The second line of code was:<br>
            <font color="#008000">public static</font> <font color="#B00040">void</font> <font color="#1aa3ff"><em>main</em></font>(<font color="black">String</font>[] <font color="#a300cc">args</font>)</p>

            <p>This line declares a function named <font color="#1aa3ff">main</font>. It also declares this function as <font color="#008000">public</font>, <font color="#008000">static</font>, and <font color="#B00040">void</font>. Inside the parentheses, there's the function's parameter <font color="black">String</font>[] <font color="#a300cc">args</font>. You'll learn about the meaning of all these in <a href="108_1">Lesson 8</a>.</p>

            <p>However, it's important to understand that every program starts inside this function. The function name is always <font color="#1aa3ff"><em>main</em></font> and has to be declared exactly like we did above. There can be ONLY ONE <font color="#1aa3ff"><em>main</em></font> function in every program and it is ALWAYS inside a class. When you execute the program, the code inside the <font color="#1aa3ff"><em>main</em></font> function will be executed.</p>

            <p>If we don't write anything inside, nothing will happen.</p>
        "]]></item>

        <item>Saying hello</item>
        <item><![CDATA["
            <p>The last line of code that needs explaining is this:<br>
            System.out.println( <font color=\"#a300cc\">\"Hello World!\"</font> ); <br>
            </p>

            <p>This line will output/print to the screen the words \"Hello World!\" (without the quote marks \").</p>

            <p>We can print anything to screen using the command function:<br> System.out.println( <font color=\"#a300cc\">\"Your message here\"</font> );</p>

            <p><b>Note</b> the <b>;</b> at the end. Every instruction should be followed by ; (the semicolon). There are some exceptions which we'll cover in future lessons. </p>

            <p>You can print your own message to screen, or even print more messages by calling the printing function multiple times:<br>
            System.out.println( <font color=\"#a300cc\">\"This is a message\"</font> );<br>
            System.out.println( <font color=\"#a300cc\">\"And this is another message\"</font> );</p>

            <p>Try printing your own messages to the screen. Remember that the print instruction must be written inside the <font color=\"#1aa3ff\">main</font> function.</p>
        "]]></item>

        <item>Comments</item>
        <item><![CDATA["
            <p>In Java we have the ability to write text that is ignored by the program. This can be used, for example, to explain a piece of code. This is known as a comment. </p>

            <p>To write a comment we use // (double forward slash) followed by text.<br>
            //This is a comment</p>

            <p>You can write anything you want in a comment and leave as many comments as you want, they won't affect the program execution in any way. You don't need to write a ; (semicolon) after a comment.</p>

            <p>The above example can only be used to write a comment on a single line. If we want to write a comment on multiple lines we could start every line with the // (double forward slash) symbol or we can use the multiple line comment symbol: <br>
            /* This is a <br>
            &nbsp; comment written on<br>
            &nbsp; multiple lines.<br>
             */
             </p>

            <p>We use the /* symbol to start the comment and */ to end it. Between these two symbols, we can write anything and have as many new lines as we want.</p>
        "]]></item>

        <item>There\'s more to it</item>
        <item><![CDATA["
            <p>Java is a powerful language. In the next lesson, you are going to learn a very important concept: <font color="blue">variables</font>.</p>

            <p>Remember: if there is something unclear, you can always go back and reread any part of any lesson. When your ready, proceed to the next lesson: Variables</p>
        "]]></item>
    </string-array>

    <string-array name="lesson103">
        <item>Introduction to variables</item>
        <item><![CDATA["
            <p>Variables are places where we can store data. You can think of them like buckets. Except you have to define what kind of data you can store in a variable.</p>

            <p>In Java, there are 8 Primitive Data Types. Other than these, there are the Object Data Types, which are a bit harder to understand for now, since they deal with classes. We will however, use some of them as they are build into Java's standard library.</p>

            <p>Let's start with the Primitive Data Types. Tap next to continue.</p>
        "]]></item>
        <item>Primitive types</item>
        <item><![CDATA["
            <p>We will start with the Primitive Data Types as they are going to be used for basic operation. They can store data such as numbers, characters and true/false values.</p>
            <p>
            1. byte (integer ~ 1 byte)<br>
            2. short (integer ~ 2 bytes)<br>
            3. int  (integer ~ 4 bytes)<br>
            4. long (integer ~ 8 bytes)<br>
            5. float (float number ~ 4 bytes)<br>
            6. double (float number ~ 8 bytes)<br>
            7. char (character ~ 2 bytes)<br>
            8. boolean (true or false)
            </p>

            <p>You can click on a type for more information about it. Seem like too many? Don't worry, you're not going to use all of them all the time. Next, let's see how you can declare a variable and print it to the screen.</p>

        "]]></item>
        <item>Using a variable</item>
        <item><![CDATA["
            <p>To declare a variable, all you have to do is write the variable type followed by a variable name, like this:<br>
            int myVariable;</p>

            <p>Things to remember about variables:<br>
            &nbsp;&nbsp;- both the variable type and the name are case-sensitive<br>
            &nbsp;&nbsp;- you can't declare two variables with the same name in the same program<br>
            &nbsp;&nbsp;- the variable name cannot start with a number and cannot contain spaces. <br>
            </p>
            <p>
            Once a variable is declared you can assign values to that variable like this:<br>
            myVariable = 12;</p>

            <p>Finally, you can print the data inside the variable using the function from the previous lesson, like this:<br>
            System.out.println(myVariable);</p>

            <p>Note that we wrote the variable name with no quotes. We only use quotes when we want to print a text message. When we want to print what is inside a variable, we only write the variable name with no quotes.</p>
        "]]></item>
        <item>Full program</item>
        <item><![CDATA["
            <p>You code should look like this:</p>

            <p>public class MyProgram { <br>
                &nbsp;&nbsp;public static void main(String[] args) { <br>
                    &nbsp;&nbsp;&nbsp;&nbsp;int myVariable;<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;myVariable = 12;<br>
                    &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(myVariable);<br>
                &nbsp;&nbsp;}<br>
            }</p>

            <p>Running the code above will output the number 12 on the screen.</p>
        "]]></item>
        <item>Numbers, Integers</item>
        <item><![CDATA["
            <p>Integer (int) variables will be especially useful when we're going to use loop statements in lesson 7. Let's play with them for a bit more. The following code will give myVariable the value of 4:<br>

            myVariable = 2+2;</p>

            <p>As you can see, Java will perform the operation on the right side of the = (equal sign) and the result will be stored in our variable. We can also do this:<br>

            myVariable = 2;<br>
            myVariable = 3 + myVariable;</p>

            <p>The first line of code will assign the value of 2 to myVariable. The second line will assign to myVariable the result of the operation 3+myVariable. Since myVariable had a value of 2, the operation performed will be 3+2. Therefore, the value assigned to myVariable will now be 5. As you can see, when attempting to solve these operations, you should just replace the variable with the value it has.</p>

            <p>You can also try the operators: - (substitution), * (multiplication) and / (division). </p>
        "]]></item>
        <item>Other primitives</item>
        <item><![CDATA["
            <p>We'll ignore the byte, short and long data types for now as the only difference between them and the int type is the highest number they can store. The int data type can store numbers between -2,147,483,648 to 2,147,483,647. The range of byte and short types are smaller than int while the long type has an bigger range than int.</p>

            <p>To store decimal numbers we will use the double data type. Try to create a double variable in your program. For example:<br>
            double aNumber;<br>
            aNumber = 4.57;</p>

            <p>Note that you can also directly define a variable like this:<br>
            double aNumber = 4.57;</p>

            <p>This is called initialization. You can do this with any primitive data type.</p>

            <p>A float variable works the same as a double except you have to add an f at the end of the number:<br>
            float aFloatVar = 4.57f;</p>

            <p>They have less precision than a double (you can write less numbers after the decimal point). It's recommended to NOT use float unless you have to.</p>

            <p>A boolean can store only 2 values: true or false. Your going to learn the purpose of this in lesson 5.</p>
        "]]></item>
        <item>Characters, Strings, Objects</item>
        <item><![CDATA["
            <p>The last primitive type is char. You can store a single character inside a char:<br>
            char myVar = 'b';</p>

            <p>It is very important that the character is surrounded by single quotation marks.</p>

            <p>What if you want to store a sentence inside a variable? Well, to do that we are going to use one important Object Data Type: the String. This is a very special and very useful data type. Unlike other Object data types, Java allows using String almost like a primitive type. Therefore, to declare a String you can write:<br>
            String myStrVar = \"This is a sentence\";</p>

            <p>Make sure you write String with a capital S. As you learned earlier, these are case-sensitive. </p>

            <p>Go ahead and try playing with these primitive data types for a bit. Declare them, give them values and print them to screen.</p>

            In the next lesson, we are going to store values inside variables based on user input.
        "]]></item>
    </string-array>

    <string-array name="lesson104">
        <item>User input</item>
        <item><![CDATA["
<p>Sometimes in your program you will want to read user input. You will read that user input, store it in a variable and do something with it.</p>

<p>In Java, there are many ways to read user input, but we'll go with one of the easiest. In this lesson we are going to use an Object Data Type variable called Scanner. To use this object, we first have to import it in our program. This is done like this:</p>

<p>import java.util.Scanner;</p>

<p>The import statements are written above the class. The above code will import the Scanner object which is inside the java.util library.</p>
    "]]></item>
        <item>Using a Scanner</item>
        <item><![CDATA["
<p>Now that we imported the Scanner object, we can use it in our program. Inside our program's main function we are going to declare a Scanner variable like this:</p>

<p>Scanner reader = new Scanner(System.in);</p>

<p>What we did here is declare a variable named reader as Scanner. Then we assign to it a new Scanner object that reads from System.in (which is keyboard input). This is how most Object Data Type variables are declared. In the previous lesson, we learned that String is an exception to this rule. We can directly assign strings to a String data type, but we could also do this:</p>

<p>String mystr = new String("This is a string");</p>
    "]]></item>
        <item>Reading a number</item>
        <item><![CDATA["
<p>We declared our Scanner variable. Now, we can use it to read user input. However, we need a place to store it so we are going to have to declare a variable to store it. Let's assume the input we're going to receive is a number. We will store it in an int variable.</p>

<p>int number;</p>

<p>Next, we are going to use the Scanner to read the user input and store it into the number variable.</p>

<p>number = reader.nextInt();</p>

<p>nextInt() is a function belonging to the Scanner object. You can access these functions only through a variable of the Scanner type. This function will read the next user input as int and store it in the number variable.</p>

<p>You can then print the result on the screen like this:</p>

<p>System.out.println("The number is:");<br>
System.out.println(number);</p>

<p>Next, let's run this program.</p>
    "]]></item>
        <item>Review</item>
        <item><![CDATA["
<p>The final program should look like this:</p>

<p>import java.util.Scanner;</p>

<p>public class MyFirstApp { <br>
   &nbsp;&nbsp;public static void main(String[] args) { <br>
       &nbsp;&nbsp;&nbsp;&nbsp;Scanner reader = new Scanner(System.in);<br>
       &nbsp;&nbsp;&nbsp;&nbsp;int number;<br>
       <br>
       &nbsp;&nbsp;&nbsp;&nbsp;number = reader.nextInt();<br>
       <br>
       &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"The number is:\");<br>
       &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(number);<br>

   &nbsp;&nbsp;}<br>
}</p>

<p>Run the program. In the console (at the bottom area of the screen), write a number and press enter (you might have to click inside the console to write). The number should be printed on the screen along with the message "The number is:".</p>
    "]]></item>
        <item>One keyboard Scanner only</item>
        <item><![CDATA["
<p>Even though you can declare multiple Scanner variables inside your program (and at some point you might have to), it's best if you don't declare more than one for now. In the next lessons, if we will require user input, we're going to declare a Scanner at the beginning of the program, that reads input from System.in and use it for the rest of the program.</p>

<p>Typically, the Scanner should be closed after we're done using it. However, we're not going to do that in these lessons. Once a Scanner that reads from System.in (keyboard) is closed, it cannot be used anymore and it cannot be "reopened".</p>

<p>In later lessons, we might use Scanner for reading files. In this case the Scanner should be closed after it is done reading.</p>
    "]]></item>
        <item>Read more</item>
        <item><![CDATA["
<p>What if we want to read something else? We could read a double (or float) by declaring a variable with that type and using the correct function to read it (nextDouble() for example). Reading a character is trickier: there's no function called nextChar() in a Scanner object. </p>

<p>Reading a String is much easier. Declare a String variable and use the nextLine() function:</p>

<p>String str;<br>
str = reader.nextLine();</p>

<p>You will now be able to input a string in your program. Go ahead and try to read a string and print it.</p>

<p>Finally to read a character we can use a trick: read the first letter of a string. We can do that like this:</p>

<p>char ch = reader.nextLine().charAt(0);</p>

<p>The function charAt() will return/give back a character inside a string based on position. We use the 0th position because in the programming world, the counting starts at 0 instead of 1. So we basically tell the function to give us the first character in the string that the user has given to us.</p>
    "]]></item>
        <item>More ways</item>
        <item><![CDATA["
<p>The Scanner object is one of the many ways to read data from user input. In chapter II, we will come back to Scanner and use it to read files from your computer. You'll also learn new objects for reading user input and files.</p>

<p>If things are starting to feel complicated, you might want to take a break and practice what you've learned so far. In following lessons, we are going to expand on what you've learned so far. You're also going to learn about Conditionals and Loops, two very useful concepts.</p>
    "]]></item>
    </string-array>

    <string-array name="lesson105">
        <item>Decisions, decisions</item>
        <item><![CDATA["
<p>Let's assume you want to ask the user to enter two numbers. You will then compare the numbers and display a message saying which number is greater.</p>

<p>To do that you have to make a decision: output that the first number is greater or output that the second number is greater.</p>

<p>In Java, this is done using the if statement.</p>
    "]]></item>
        <item>The if statement</item>
        <item><![CDATA["
<p>The if statement looks something like this:</p>

<p>if(condition) {<br>
 &nbsp;&nbsp;//if the condition is true, execute all the commands in here.<br>
} </p>

<p>The condition is an expression that can evaluate to true or false. If the condition is true, the code between brackets is executed. Otherwise it's ignored. For example:</p>

<p>if(6&gt;4) {<br>
    &nbsp; &nbsp;System.out.println(\"This is inside if\");<br>
}<br>
System.out.println(\"This is outside if and it will execute every time\");</p>

<pThe code above will print both messages. However, if we change the condition from 6&gt;4 to 6&lt;4, the first message won't be printed anymore because, obviously, 6 is not lower that 4.</p>
    "]]></item>
        <item>What else?</item>
        <item><![CDATA["
<p>We can also have instructions that execute only if the condition is false. This is called the if else statement and it looks like this:</p>

<p>if(condition) {<br>
 &nbsp;&nbsp;//if condition is true, execute all commands in here<br>
}<br>
else {<br>
&nbsp;&nbsp;//if condition is false, execute all commands in here<br>
}</p>

<p>We can now make a program that compare two numbers and outputs the result. Consider the following program:</p>

<p>int a=3;<br>
int b=9;<br>
<br>
if(a&gt;b) {<br>
    &nbsp;&nbsp;System.out.println(\"a is greater than b\");<br>
}<br>
else {<br>
    &nbsp;&nbsp;System.out.println(\"b is greater than a\");<br>
}</p>

<p>Running the above program will output "b is greater than a". You can play with the values of a and b, change them and see how the result changes.</p>
    "]]></item>
        <item>More decisions</item>
        <item><![CDATA["

<p>There's one last thing missing in our program. What if the numbers are equal? To handle this, we are going to use the else-if statement. </p>

<p>if(condition) {<br>
 &nbsp;&nbsp;//execute this if condition is true<br>
}<br>
else if(anotherCondition) {<br>
 &nbsp;&nbsp;//if condition is false, but anotherCondition is true, execute this<br>
}<br>
else {<br>
 &nbsp;&nbsp;//if no conditions are true, execute this<br>
}</p>

<p>This allows us to specify another condition that might be true and another set of instruction to execute if it is true. However you have to keep in mind that each code is executed from top to bottom. Therefore, if the first condition is true then the other conditions are ignored even if they might true as well. In the next section, we'll explain this with examples.</p>

    "]]></item>
        <item>Compare numbers</item>
        <item><![CDATA["
<p>Let's start by implementing our number compare program using this big form of if statement:</p>

<p>int a=3;<br>
int b=9;<br>
<br>
if(a&gt;b) {<br>
 &nbsp;&nbsp;System.out.println(\"a is greater than b\");<br>
}<br>
else if(a==b) {<br>
 &nbsp;&nbsp;System.out.println(\"a and b are equal\");<br>
}<br>
else {<br>
 &nbsp;&nbsp;System.out.println(\"b is greater than a\");<br>
}
</p>

<p>Note the operator for checking if the variables are equal is == (two equal signs). The operator = (single equal sign) is used only to assign values. Writing a=b would assign the value of b to a. In the above case, a would become 9. That would mess up our program and we would end up getting the wrong output.</p>
    "]]></item>
        <item>First come, first served</item>
        <item><![CDATA["
<p>The order of conditions is important. Let's introduce two more operators in order to explain this: <br>
 &lt;= (the greater than or equal sign) and &gt;= (the lesser than or equal sign). </p>

<p>Now, change the condition in the if statement from a>b to a>=b. What you will notice is that when a and b are equal, both the first (a>=b) and the second condition (a==b) are true. </p>

<p>However, only the first message is printed to the screen. That is because the if statement only takes the first condition that it finds true and executes it, ignoring everything else.</p>
    "]]></item>
        <item>Booleans</item>
        <item><![CDATA["
<p>Another way to write conditions is to use the boolean variables we've seen in lesson 3. Remember that a boolean variable can only store two values: true or false.</p>

<p>In an if condition we can test whether a boolean variable is true or false using the == sign. </p>
<p>
boolean payedTheBills = false;<br>
if(payedTheBills == false) {<br>
 &nbsp;&nbsp;System.out.println(\"Go ahead and pay them!\");<br>
}<br>
else {<br>
 &nbsp;&nbsp;System.out.println(\"Nothing to worry about.\");<br>
}<br>
</p>
<p>The above program will output the first message: \"Go ahead and pay them!\". That is because the variable payedTheBills is false and we check if it's equal to false. The idea here is that false==false evaluates to true (for obvious reasons). And since it evaluates to true, the first message in the if statement is executed.</p>
    "]]></item>
        <item>Logic makes sense</item>
        <item><![CDATA["

<p>For some people, these logic concept might seem new and difficult to grasp. Statements such as false==false evaluates to true might seem weird at first. However, in time it will start making sense (if it doesn't already).</p>

<p>It's important to be able to write a program in a way that you understand it. Therefore, let's discuss a couple more ways to write our previous "Paying the bills" program. </p>

<p>First, we'll introduce one more sign: the != (not equal sign). This test if the first is NOT equal to the second. For example:</p>

<p>8 != 10 evaluates to true: 8 is indeed not equal to 10</p>

<p>7 != 7 evaluates to false: 7 is equal to 7. Saying that they are not equal is false</p>
    "]]></item>
        <item>Same result, different condition</item>
        <item><![CDATA["
<p>Now let's see a couple more different ways to rewrite our "Paying the bills" program. First, instead of testing if payedTheBills is false, we could test if it is true and swap the two messages:</p>

<p>if(payedTheBills == true) {<br>
 &nbsp;&nbsp;System.out.println(\"Nothing to worry about.\");<br>
}<br>
else {<br>
 &nbsp;&nbsp;System.out.println(\"Go ahead and pay them!\");<br>
}
</p>
<p>We could also write the above with the condition <br>

if(payedTheBills != false) {</p>

<p>Finally, we could only write the variable name inside the condition like this <br>

if(payedTheBills) {</p>

<p>Since the variable can only be true or false, the condition can be considered true if the variable is true and false if the variable is false.</p>
    "]]></item>

        <item>Logical Operators</item>
        <item> <![CDATA["
        <p>
        Using logical operators we can create complex conditions. To write complex conditions we're going to use three logical operators: && (logical AND), the ! (logical NOT) and the || (logical OR) sign.</p>

        <p>These logical operators are used to test boolean expressions (true or false) and come back with a new boolean value. The simplest operator is the ! (logical NOT) which negates the value. It is placed in front of expression:<br>
        !true evaluates to false<br>
        !false evaluates to true</p>

        <p>The other two operators have to be placed between two boolean expressions. The && (logical AND) operator evaluates to true only if both the expression are true, otherwise it evaluates to false. The || (logical OR) operator evaluates to false only if both expressions are false, otherwise it evaluates to true.</p>

        <p>
        <b>AND</b><br>
        false && false -&gt; false<br>
        true && false -&gt; false<br>
        false && true -&gt; false<br>
        true && true -&gt; true </p>

        <p>
        <b>OR</b><br>
        false || false -&gt; false<br>
        true || false -&gt; true<br>
        false || true -&gt; true<br>
        true || true -&gt; true</p>

    "]]></item>

        <item>Complex conditions</item>
        <item><![CDATA["
        <p>Let's test if a number is between two other numbers:</p>
        <p>
        int x = 5;<br>
        if((x >= 2) && (x <= 15)) {<br>
          &nbsp;&nbsp;System.out.println("x is between 2 and 15");<br>
        }
        </p>

        <p>

        Remember that the AND operator evaluates to true only if both expressions are true. Both x>=2 and x<=15 must be true, therefore we used the AND operator. The two expressions must be surrounded by round brackets.
        </p>

        <p>
        If only one expression needs to be true, we can use the OR operator. Let's take a very simple example. If a number is 0 or 1 we print "OK":</p>
        <p>
        if((x == 0) || (x == 1)) {<br>
          &nbsp;&nbsp;System.out.println("OK");<br>
        }
        </p>



    "]]></item>



    </string-array>

    <string-array name="lesson106">
        <item>Dealing with too much</item>
        <item><![CDATA["
<p>Arrays exist to make our work easier when dealing with lots of elements. Imagine you want to store a number in your program. You'd declare an int variable and store that number there.</p>

<p>But what if you want to store 200 numbers? You could declare individual variables for each number. However, there's an easier way: using arrays. Let's take an example.</p>
    "]]></item>
        <item>Array instead of variable</item>
        <item><![CDATA["
<p>We want to store 5 ints. We could write:</p>
<p>
int number1;<br>
int number2;<br>
int number3;<br>
int number4;<br>
int number5;</p>

<p>Using an array, we can rewrite the above code like this:</p>

<p>int[] number = new int[5];</p>

<p>This means that we have an int variable named number that can store not one but five ints. Using arrays is a more convenient way to store collections of data.</p>
    "]]></item>
        <item>Assigning</item>
        <item><![CDATA["
<p>Now, we can assign a value to any element of the array like this:</p>

<p>number[2] = 1234;</p>

<p>This assigns the number 1234 as the value of the 3rd element in the array. Remember that the counting start at 0, therefore the third element is at index 2, not 3.</p>

<p>number[0] = 33; //Sets the first element to be 33<br>
number[4] = 254; //Sets the last element to be 254</p>
    "]]></item>
        <item>Confusing declaration</item>
        <item><![CDATA["

<p>So what about number[5]? If we use the indexes from 0 to 4 to store the five numbers, why did we declare the array with new int[5] instead of new int[4]?</p>

<p>When we declare an array, we specify the size of the array inside the square brackets. This means that if we want to store 5 ints, we will declare the array new int[5]. What is confusing for beginners, is the use of the square brackets both when we define the array size and when we want to access (or assign) an element inside it. In both cases square brackets [] are used.</p>

<p>In practice, the array of five elements we declared using new int[5] has the following array elements:<br>
number[0], number[1], number[2], number[3], number[4].</p>

<p>It has five elements which is the way we intended. The element number[5] does NOT exist.</p>
    "]]></item>

        <item>Initializing arrays</item>
        <item><![CDATA["
    <p>We can also initialize an array with values. Previously, we declared our array with 5 elements like this:<br>
int[] number = new int[5];</p>

<p>This declares an array with five int elements. By default, all of the elements will have the value of 0. We can then assign a value to an index, like explained before.</p>

<p>If you already know the values you want to store in the array, you can initialize it like this:<br>
int[] number = {4, 7, 8, 99, 12};</p>

<p>The above array has five elements. The first value is 4, the second value is 7 and so on. In other words, number[0] is 4, number[1] is 7 and so on.</p>
    "]]></item>

        <item>Accessing</item>
        <item><![CDATA["
<p>Accessing an array is as easy as assigning a value to it. Let's print to screen the value of number[2].</p>

<p>System.out.println(number[2]);</p>

<p>If we don't assign a value to number[2] it will print the default value 0.</p>

<p>Trying to print the entire array like this:</p>

<p>System.out.println(number);</p>

<p>will print a series of letters and numbers that won't mean anything to you. In order to print the elements of an array (in a certain order), we are going to have to use loops. In the next lesson, we will learn about loop statements and how to use them to print arrays.</p>
    "]]></item>
    </string-array>

    <string-array name="lesson107">
        <item>Again and again</item>
        <item><![CDATA["
<p>Loops can be used to execute the same piece of code multiple times. Just like decision making, loops are very important. You will use loops in almost every program that you'll write.</p>

<p>Loops are especially useful when working with arrays. In this lesson, we are going to learn the two loop statements that Java has: for and while.</p>
    "]]></item>
        <item>The while loop</item>
        <item><![CDATA["
<p>The while statement looks very similar to the if statement. Its general form is:</p>

<p>while(condition) {<br>
 &nbsp;&nbsp;//Execute the code in here<br>
}</p>

<p>If the condition is true, the code inside the brackets will execute. Unlike the if statement, this code will keep executing over and over again until the condition becomes false.</p>

    "]]></item>
        <item>Looping forever</item>
        <item><![CDATA["

<p>It is very important to make sure we don't get trapped inside a never ending loop. The code that will execute inside the while loop, should at some point have an instruction that will change the condition to become false.</p>

<p>If you enter a never ending loop, your program will freeze and become unusable and you will have to force your program to quit (by ending the process). In some cases, the program will crash and quit on it's own.</p>
    "]]></item>
        <item>Counting</item>
        <item><![CDATA["
<p>
Let's write a counting program. Our program will count from 1 to 10 and then will print a message on the screen. The following goes into the main function:</p>

<p>int i=1;<br>
while(i&lt;=10) {<br>
    &nbsp;&nbsp;System.out.println(i);<br>
    &nbsp;&nbsp;i++;<br>
}<br>
System.out.println(\"Done counting.\");</p>

<p>In the next sections, we'll explain the code line by line.</p>
    "]]></item>
        <item>Program explained</item>
        <item><![CDATA["
<p>You should already know what the first line does:<br>
int i=1;</p>

<p>Declares a variable i and initialises it with 1.</p>

<p>On the second line starts the while statement. The condition state that the code should be execute while i is less than or equal to 10.</p>

<p>The third line simply prints the value that i has.</p>

<p>An important instruction is on the fourth line: i++. This is the equivalent of doing:<br>
i = i+1</p>

<p>It increments i by 1. Now, all the code inside the while loop was executed and the condition is checked again. This time i has a value of 2 because we incremented it. The condition remains true and all the code will execute again. This time, the third line will print 2. Then, i will be incremented once again and will have a value of 3.</p>

<p>This repeats until i will become 11. When that happens, once the condition is verified again, it will now be false. Therefore, the code inside the brackets will not execute anymore. The program will then continue normally and execute the rest of the instructions outside of the while statement. </p>

<p>In our case, it will print the message: Done counting.</p>
    "]]></item>
        <item>For loop</item>
        <item><![CDATA["
<p>Next, let's discuss the for loop statement. This one is a bit trickier. The general form looks like this:</p>

<p>for(initialization; condition; update) {<br>
    <br>//Code here will execute while condition is true<br>
}</p>

<p>Besides the condition, the for loop allows us to write an instruction that will execute only the first time, as well as an instruction that will execute every time the loop repeats. This means that we can write our previous counting program like this:
</p>

<p>for(int i=1; i&lt;=10; i++) {<br>
    &nbsp;&nbsp;System.out.println(i);<br>
}<br>
System.out.println(\"Done counting.\");</p>

<p>In the above for loop, the instruction int i=1 will execute only once, at the beginning of the loop. The i++ instruction will execute each time after all instructions inside the for loop execute. The condition works the same: while it is true, the instructions inside will keep executing.</p>

    "]]></item>
        <item>Printing an array</item>
        <item><![CDATA["
<p>
Let's make a different program now. One that prints the elements of an array. We are going to use the for statement to do that.
</p>
<p>
First, let's declare a 5 element array. It will hold integers.
</p>

<p>int[] n = new int[5];</p>

<p>At this point, all five elements inside the array are 0. You can individually assign other numbers to the elements in the array like we discussed before:</p>

<p>n[2] = 36; //Set the third element to 36</p>

<p>However, we can use a loop to set all elements in the array to some value.</p>

<p>for(int i=0;i<5;i++) {<br>
 &nbsp;&nbsp;n[i] = i;<br>
}</p>

<p>The code above makes i go from 0 to 4 and each time, it sets the ith element of the array to the value of i.  It's the equivalent of this:</p>
<p>
n[0] = 0;<br>
n[1] = 1;<br>
n[2] = 2;<br>
n[3] = 3;<br>
n[4] = 4;<br>
</p>
<p>Obviously, when we have to deal with 100 numbers, the above solution is too much work and the only efficient way is to use a loop.</p>

    "]]></item>
        <item>Printing an array part 2</item>
        <item><![CDATA["
<p>
Now that our n array has elements, let's print the array. In the previous lesson you learned that you CAN NOT do this:
</p>
<p>System.out.println(n);</p>

<p>This prints something useless. Instead, to print the array we'll use a loop:</p>

<p>for(int i=0; i<5; i++) {<br>
 &nbsp;&nbsp;System.out.println(n[i]);<br>
}</p>

<p>This way, each element is printed to the screen. Remember that we go from the 0th element to the 4th element. This is done by starting with i from 0 and repeating while i<5 (i is strictly lesser than 5) or i<=4 (i is lesser than or equal to 4).</p>
    "]]></item>
        <item>Get the length</item>
        <item><![CDATA["
<p>
A better way to write conditions when iterating through an array is using the length property of the array. This gives us the exact length of the array.
</p>
<p>
for(int i=0;i<n.length;i++) {<br>
 &nbsp;&nbsp;System.out.println(n[i]);<br>
}</p>

<p>We accessed the length property of our n array. This is equal to 5, therefore writing i<n.length is like writing i<5. This is useful because if you decide to change the number of elements of n, you no longer have to change the loop condition to match it.</p>

    "]]></item>
        <item>Put a break on it</item>
        <item><![CDATA["

<p>So far, you learned that loops stop once the condition becomes false. There's also a way to stop a loop using a special instruction: break. When you break a loop, no other instruction inside the loop will get execute. </p>
<p>
while(condition) {<br>
  &nbsp;&nbsp;//… some instructions up here …<br>
  &nbsp;&nbsp;break;<br>
  &nbsp;&nbsp;//… instructions here but they won't execute, condition doesn't matter<br>
}<br>
//… instructions outside the loop, execute when loop is finished<br>
</p>
<p>
The break instruction works only inside control structures such as loops. You can choose when the loop should break based on a condition by adding an if structure inside the loop.</p>
<p>
while(condition) {<br>
  &nbsp;&nbsp;//if(other_condition) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;break;<br>
  &nbsp;&nbsp;}<br>
  &nbsp;&nbsp;//code here<br>
}</p>

    "]]></item>

        <item>Do-While</item>
        <item><![CDATA["
    <p>The while loop (just like the for loop) checks the condition at the beginning of each loop (each iteration). This means that if the condition is false from the start, the code inside the loop never executes.</p>

    <p>If we want to make sure that the code inside the loop executes at least once, even if the condition is false, we can use the do-while loop.</p>

    <p>do {<br>
      &nbsp;//code here<br>
    } while(condition);</p>

    <p>As you can see in this structure, the condition is at the end of the structure. If we enter this loop with the condition evaluating to false, the code will still execute once.</p>
    "]]></item>


        <item>More loop control</item>
        <item><![CDATA["
    <p>In the next chapter, we will come back to the break instruction to learn more about it. You'll also learn about the continue keyword.</p>

    <p>There is also another way to use the for loop, known as for-each.</p>
    "]]></item>


    </string-array>

    <string-array name="lesson108">

        <item>Group of instructions</item>
        <item><![CDATA["
            <p>Methods (also known as functions) are useful when you need to group a series of instructions. Just like variables, you can name methods any way you want. Defining methods is recommended for easier code readability.</p>

            <p>We already know several methods. For example the System.out.println() method which prints something to console. It's defined inside the System.out class.</p>

            <p>Another important method is the main() method which we must define in our program. It is called automatically when the program starts.</p>

            <p>Every method must be declared inside a class. Until chapter III, we will use only one class in our project. Therefore, we are going to declare all methods inside this class.</p>

            <p>We cannot define a method inside another method.</p>
        "]]></item>

        <item>A simple method</item>
        <item><![CDATA["
            <p>Let's define a simple method. The method will be called SayHello.</p>
            <p>
            static void SayHello() {<br>
              &nbsp;&nbsp;System.out.println(\"Hello\");<br>
            }
            </p>

            <p>Between the brackets are the instructions that will be executed when we call the method. In this case, we only have one instruction: we call the System.out.println method which is going to print "Hello" to screen.</p>

            <p>Inside the two round brackets () we can define parameters. We will discuss parameters later. This method doesn't get any parameters, so we don't write anything inside the round brackets (but we have to write them).</p>

            <p>We'll use the static keyword in order to be able to call this method directly. This will be better explained in Chapter III when you'll learn about classes and objects.</p>

            <p>Finally the void keyword means that the method won't return any value. methods can have the type void or any of the primitive or object data types.</p>
        "]]></item>

        <item>Calling</item>
        <item><![CDATA["
            <p>
            To call our method, we just use:<br>
            SayHello();
            </p>

            <p>
            Remember to call the method inside the main method<br>
            public static void main(String[] args) {<br>
              &nbsp;&nbsp;SayHello();<br>
            }
            </p>

            <p>Running this program will output "Hello".</p>

            <p>After calling the method and the method finishes its execution, the instructions below the calling instruction will continue executing normally.</p>
            <p>
            public static void main(String[] args) {<br>
              &nbsp;&nbsp;SayHello();<br>
              &nbsp;&nbsp;//if there's any more code here<br>
              &nbsp;&nbsp;//it will execute after the method finishes<br>
            }
            </p>
        "]]></item>

        <item>Parameters</item>
        <item><![CDATA["
            <p>To send data inside a method when we call it, the method must accept parameters. For example, let's say we want to add two numbers and output the result (the sum).</p>

            <p>static void AddNumbers(int a, int b) {<br>
              &nbsp;&nbsp;int result = a + b;<br>
              &nbsp;&nbsp;System.out.println(result);<br>
            }
            </p>
            <p>This method takes two parameters, a and b, both of int type. This means that they can only be integers. Inside the brackets we add the value of the two parameters and store the result inside the result variable.</p>

            <p>Then we output the result variable which contains the sum. </p>
        "]]></item>

        <item>Function to add</item>
        <item><![CDATA["
            <p>To call this method we use:<br>
            AddNumbers(2,2);
            </p>
            <p>The above will output 4 (the sum of 2+2 is 4). Try calling the method with any other two numbers. Notice that you must provide both parameters (not more or less) and they both must be numbers (because they are defined as int).</p>
            <p>
            The result variable inside the method can only be used in this method. It is called a local variable and it stops existing once the method ends. Therefore, we cannot directly access result from main.</p>
        "]]></item>

        <item>Returning values</item>
        <item><![CDATA["
            <p>
            To overcome this, methods can return a value. The returned value can be stored inside another variable for future use. Let's define another method that adds two numbers. This one will return the sum instead of printing it to screen.</p>
            <p>
            static int Sum(int a, int b) {<br>
              &nbsp;&nbsp;int result = a + b;<br>
              &nbsp;&nbsp;return result;<br>
            }
            </p>

            <p>We use the keyword return to return a value. The method type must match the type of value we return. In this case, the method type is int and the result variable is also int, so they match.</p>

            <p>If the method type is not void, you MUST return a value. Otherwise, your program won't compile.</p>
        "]]></item>

        <item>Somebody get that value</item>
        <item><![CDATA["
            <p>
            We can call this method just like the other one:<br>
            Sum(2,2);
            </p>
            <p>
            This time, you may notice that nothing happens if you run the program. That's because the method computes the sum of 2+2 and returns the result; but we don't do anything with it.</p>

            <p>We should store the returned result in a variable. And we should also print it to confirm it's there.</p>
        "]]></item>

        <item>Handle returns</item>
        <item><![CDATA["
            <p>
            First, define a variable to store the result. We'll call it theSum.<br>
            int theSum;
            </p>

            <p>Next, we have to call the method and store the returned value inside that variable. To do that we will write:<br>
            theSum = Sum(2,2);
            </p>
            <p>
            We can imagine that Sum(2,2) is replaced with 4, since that is exactly what happens. Therefore, the above statement is the equivalent of theSum = 4;
            </p>
            <p>
            Finally, we can print the variable theSum just to test if it contains the correct value:<br>
            System.out.println(theSum);
            </p>
        "]]></item>

        <item>Return and stop</item>
        <item><![CDATA["
            <p>
            When the return instruction is executed, the method stops, the value of the specified local variable is returned and the execution of code continues with the instruction below the calling. Therefore, anything written below return will NOT execute. For example:
            </p>
            <p>
            static int ExampleFunc() {<br>
              &nbsp;&nbsp;int a = 1+1;<br>
              &nbsp;&nbsp;return a;<br>
              &nbsp;&nbsp;//Below this point, the code won't execute<br>
              &nbsp;&nbsp;int b = 4+5;<br>
              &nbsp;&nbsp;b = b + a;<br>
            }<br><br>

            public static void main(String[] args) {<br>
              &nbsp;&nbsp;int x = ExampleFunc();<br>
              &nbsp;&nbsp;//once the ExampleFunc() returns,<br>
              &nbsp;&nbsp;//the code here continues its execution<br>
            }
            </p>
        "]]></item>

        <item>Stacking methods</item>
        <item><![CDATA["
            <p>
            Keep in mind that you don't have to call a method inside main, you can call any method inside any other method. For example:
            </p>
            <p>
            static void foo() {<br>
              &nbsp;&nbsp;//code…<br>
            }<br><br>

            static void bar() {<br>
             &nbsp;&nbsp; //code…<br>
              &nbsp;&nbsp;foo();<br>
            }
            </p>
            <p>
            In this example, bar() calls foo(). If we call bar() from another method (like main), bar() will call foo(). We can also call main from another method.
            </p>
        "]]></item>

        <item>Inception</item>
        <item><![CDATA["
            <p>
            Calling the same method inside itself is called recursion.<br>
            static void foo() {<br>
              &nbsp;&nbsp;foo();<br>
            }
            </p>
            <p>
            In the above case, calling foo() once (from main for example), will make foo() get called endlessly. When this happens, the program will quickly ran out of memory and it will "throw" a StackOverFlowError. This error is irrecoverable. In other words the program will crash and there's nothing you can. We will learn more about error throwing in the next chapter.</p>

            <p>To avoid this, recursive calls are usually surrounded by an if condition.</p>

            <p>Recursive methods are used in algorithms such as computing the fibonacci sequence.</p>
        "]]></item>

    </string-array>
</resources>