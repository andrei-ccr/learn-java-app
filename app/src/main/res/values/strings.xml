<resources>
    <string name="app_name">Learn Java</string>

    <string name="title_learn">Learn</string>
    <string name="title_interview">Interview Questions</string>
    <string name="title_about">About</string>
    <string name="title_dashboard">Dashboard</string>


    <!-- Boxes -->
    <string name="box_title_basic">Basic Learning Package</string>
    <string name="box_subtitle_basic">FREE  ~  Estimated duration: 1h - 4h</string>
    <string name="box_desc_basic">Learn Java from the beginning. This package contains only the basic concepts. Suitable for beginners.</string>

    <string name="box_title_ad">Ad free</string>
    <string name="box_subtitle_ad">Permanently disables ads</string>
    <string name="box_desc_ad">Tired of ads? You can get rid of them!</string>

    <string name="box_title_full">Complete Learning Package</string>
    <string name="box_subtitle_full">PAID  ~  Estimated duration: &gt;8h</string>
    <string name="box_desc_full">This package gives you access to all lessons and upcoming lessons. Suitable for beginners and advanced.</string>

    <array name="chapterList">
        <item name="chapter1">@array/chapter1</item>
        <item name="chapter2">@array/chapter2</item>
        <item name="chapter3">@array/chapter3</item>
        <item name="chapter4">@array/chapter4</item>
        <item name="chapter5">@array/chapter5</item>
        <item name="chapter6">@array/chapter6</item>
        <item name="chapter7">@array/chapter7</item>
        <item name="chapter8">@array/chapter8</item>

    </array>

    <string-array name="chapter_default">
        <item name="title">Error</item>
        <item name="name"> </item>
        <item name="shortDesc"> </item>
        <item name="description"> </item>

    </string-array>

    <string-array name="chapter1">
        <item name="title">Chapter I</item>
        <item name="name">Basics</item>
        <item name="shortDesc">Install Java and everything you need. Learn about variables, basic control structures, user input and more.</item>
        <item name="description">Learn about variables, basic control structures, user input and more. Build simple Java apps.</item>
    </string-array>

    <string-array name="chapter2">
        <item name="title">Chapter II</item>
        <item name="name">Basics Plus</item>
        <item name="shortDesc">Expand your knowledge with more useful concepts. Learn more about functions, loops and arrays.</item>
        <item name="description">Learn more about functions, loops, array as well as working with strings, time, and files.</item>
    </string-array>

    <string-array name="chapter3">
        <item name="title">Chapter III</item>
        <item name="name">Object Oriented Programming (OOP)</item>
        <item name="shortDesc">Introduction to OOP (Object Oriented Programming). Learn to work with classes and objects.</item>
        <item name="description">Introduction to the world of Object Oriented Programming. Learn to work with classes and objects.</item>
    </string-array>

    <string-array name="chapter4">
        <item name="title">Chapter IV</item>
        <item name="name">Data Structures</item>
        <item name="shortDesc">Organise data with data structures. Learn to use the wide range of data structures available in Java.</item>
        <item name="description">Learn to use data structures in Java. Properly organising data is especially important in large projects.</item>
    </string-array>

    <string-array name="chapter5">
        <item name="title">Chapter V</item>
        <item name="name">Advanced OOP</item>
        <item name="shortDesc">Continue learning OOP with concepts such as virtual functions, abstract classes and more.</item>
        <item name="description">Continue learning OOP with concepts such as virtual functions, abstract classes and more.</item>
    </string-array>

    <string-array name="chapter6">
        <item name="title">Chapter VI</item>
        <item name="name">Threading</item>
        <item name="shortDesc">Perform additional operations at the same time by running multiple threads.</item>
        <item name="description">Perform additional operations at the same time by running multiple threads.</item>
    </string-array>

    <string-array name="chapter7">
        <item name="title">Chapter VII</item>
        <item name="name">Generics</item>
        <item name="shortDesc">Define functions and classes that accept any data types.</item>
        <item name="description">Define functions and classes that accept any data types.</item>
    </string-array>

    <string-array name="chapter8">
        <item name="title">Chapter VIII</item>
        <item name="name">Web Related</item>
        <item name="shortDesc">Learn about applets, email and networking using Java.</item>
        <item name="description">Learn about applets, email and networking using Java.</item>
    </string-array>

    <string-array name="lessonTitleList">
        <item name="Chapter1_1">Installation</item>
        <item name="Chapter1_2">First Program</item>
        <item name="Chapter1_3">Variables</item>
        <item name="Chapter1_4">User Input</item>
        <item name="Chapter1_5">Conditionals</item>
        <item name="Chapter1_6">Arrays</item>
        <item name="Chapter1_7">Loops</item>
        <item name="Chapter1_8">Functions</item>
        <item name="Chapter2_1">Modifiers</item>
        <item name="Chapter2_2">Try-Catch</item>
        <item name="Chapter2_3">Date &amp;amp; Time</item>
        <item name="Chapter2_4">Basic File I/O</item>
        <item name="Chapter2_5">Strings &amp;amp; REGEX</item>
        <item name="Chapter2_6">Switch-Case</item>
        <item name="Chapter2_7">Random</item>
        <item name="Chapter2_8">Loops II</item>
        <item name="Chapter2_9">Program Arguments</item>
        <item name="Chapter2_10">Functions II</item>
        <item name="Chapter3_1">Classes</item>
        <item name="Chapter3_2">Encapsulation</item>
        <item name="Chapter3_3">Constructors &amp;amp; Destructors</item>
        <item name="Chapter3_4">Static classes</item>
        <item name="Chapter3_5">Inheritance</item>
        <item name="Chapter3_6">More examples</item>
        <item name="Chapter4_1">List</item>
        <item name="Chapter4_2">Stack</item>
        <item name="Chapter4_3">Set</item>
        <item name="Chapter4_4">Map</item>
        <item name="Chapter4_5">Sorting Data</item>
        <item name="Chapter4_6">More examples</item>
    </string-array>

    <string-array name="lessonDescriptionList">
        <item name="Chapter1_1">Install Java &amp; Eclipse</item>
        <item name="Chapter1_2">Hello World!</item>
        <item name="Chapter1_3">Store values and use them</item>
        <item name="Chapter1_4">Read values from keyboard</item>
        <item name="Chapter1_5">If, else-if statements</item>
        <item name="Chapter1_6">Multiple values, same variable</item>
        <item name="Chapter1_7">For, While</item>
        <item name="Chapter1_8">List of instructions</item>
        <item name="Chapter2_1">Modifiers</item>
        <item name="Chapter2_2">Try-Catch</item>
        <item name="Chapter2_3">Date &amp;amp; Time</item>
        <item name="Chapter2_4">Basic File I/O</item>
        <item name="Chapter2_5">Strings &amp;amp; REGEX</item>
        <item name="Chapter2_6">Switch-Case</item>
        <item name="Chapter2_7">Random</item>
        <item name="Chapter2_8">Loops II</item>
        <item name="Chapter2_9">Program Arguments</item>
        <item name="Chapter2_10">Functions II</item>
        <item name="Chapter3_1">Classes</item>
        <item name="Chapter3_2">Encapsulation</item>
        <item name="Chapter3_3">Constructors &amp;amp; Destructors</item>
        <item name="Chapter3_4">Static classes</item>
        <item name="Chapter3_5">Inheritance</item>
        <item name="Chapter3_6">More examples</item>
        <item name="Chapter4_1">List</item>
        <item name="Chapter4_2">Stack</item>
        <item name="Chapter4_3">Set</item>
        <item name="Chapter4_4">Map</item>
        <item name="Chapter4_5">Sorting Data</item>
        <item name="Chapter4_6">More examples</item>
    </string-array>


    <!-- Menu options -->
    <string name="action_settings">Settings</string>


    <!-- Buttons -->
    <string name="btn_next">Next</string>
    <string name="btn_next_lesson">Next Lesson</string>
    <string name="btn_finish">Finish</string> <!-- Used in the last page of the last lesson -->
    <string name="btn_start">Start</string>
    <string name="btn_activate">Activate</string>
    <string name="btn_disable_ads">Disable Ads</string>


    <!-- Other strings -->
    <string name="progress_str">Progress:</string>
    <string name="chapter_str">Chapter</string>
    <string name="fa_license">https://fontawesome.com/license</string>


    <!-- ######################################## Lessons Body and Page Title ######################################## -->
    <!-- ############################################################################################################# -->


    <string name="lesson_101_1_title">Getting Started</string>
    <string name="lesson101_1"><![CDATA["
		<p>To start learning, you'll first have to install Java. For beginners, an IDE is also recommended. This is what you'll do in this lesson: </p><p><a href="101_2">1. Download and Install Java</a></p><p><a href="101_4">2. Get an IDE (Eclipse)</a></p><p><a href="101_5">3. Learn how to create a new Project in Eclipse</a></p><p>In the following sections, you will be guided step by step on how to do these. Tap <font color="#123456">next</font> to get started!</p>
	"]]>
	</string>

    <string name="lesson_101_2_title">Downloading and Installing Java</string>
    <string name="lesson101_2"><![CDATA["
		<p>We'll start by downloading and installing Java. This tutorial applies for computers running <font color="#009900">Windows x64</font>. You'll download <font color="orange"><b>Java SE Development Kit 8</b></font>. </p><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">1. Go to the Java download webpage</a><br>2. Select <i>Accept License Agreement</i><br>3. Click on the filename <font color="#009900">jdk-8u191-windows-x64.exe</font> (click the red down arrow)<br>4. Run the downloaded executable and follow the onscreen instructions.</p><p>Java will now be installed on your computer.</p><p>In the next section, you'll also learn how to download and install an IDE. An <b><font color="#123456">Integrated Development Environment</font></b> is recommended for beginners. </p>
	"]]>
	</string>

    <string name="lesson_101_3_title">Using an IDE</string>
    <string name="lesson101_3"><![CDATA["
		<p>An <i>Integrated Development Environment</i> (IDE) is a software that makes writing programs easier. You get syntax highlighting, code suggestions, your code is validated as you type and building and running your program is faster and easier. For beginners, these features are very helpful in the learning process.</p><p>For <i>Java</i> development we are going to use <font color="orange"><b>Eclipse</b></font>. Eclipse is currently one of the most popular IDEs and possibly the most used one at the time of writing this.</p><p>So let's download and install it. Remember, we are downloading the version for <font color="#009900">Windows x64</font>. Tap next to continue.</p>
	"]]>
	</string>

    <string name="lesson_101_4_title">Getting Eclipse</string>
    <string name="lesson101_4"><![CDATA["
		<p>First, go to the <a href="https://eclipse.org/downloads/">Eclipse download page</a>. You can easily access the download page by typing <font color="#123456"><i>eclipse.org/downloads</i></font> in your browser's bar.</p><p>Click the orange <font color="#830"><i>Download</i></font> button. Another page might open and you might have to click the <i>Download</i> button once again. After the setup file has finished downloading, run it.</p><p>Once the EclipseInstaller window appears, choose the <font color="purple"><b>Eclipse IDE for Java Developers</b></font> option. Afterwards, you can click the <b>INSTALL</b> button. During installation you might have to click <i>Accept</i> a couple of times.</p>
	"]]>
	</string>

    <string name="lesson_101_5_title">Using Eclipse</string>
    <string name="lesson101_5"><![CDATA["
		<p>Everything is now set! You are ready to start programming in Java. In the next lesson you are going to write your first Java program.</p><p>Before doing that, let's learn how to use Eclipse. Go ahead and run Eclipse. You will be asked about providing a <i>workspace</i> directory. You can leave that as it is and click the <b>Launch</b> button.</p><p>Once the Eclipse IDE opens, go to <b>File &gt; New &gt; Java Project</b>. In the window that opens, you have to write a <i>Project Name</i> (eg.: MyProject) and click the <b>Finish</b> button.</p><p>Now that you created a <font color="#990000">Project</font>, you need to create a <font color="#990000"><i>Class</i></font>.</p>
	"]]>
	</string>

    <string name="lesson_101_6_title">Creating a class</string>
    <string name="lesson101_6"><![CDATA["
		<p>Every project must contain at least one class. For now, your projects will contain only one class. In this class you will write your program code. This might be confusing for now. That's OK.</p><p>To create a class for your project go to <br><b>File &gt; New &gt; Class</b><br>. In the window that opens, enter the <i>Name</i> of the class(eg.: MyFirstProgram) and the <i>Source folder</i> which is going to be <font color="#990000"><i>MyProject/src</i></font> and leave everything else as it is. Click <b>Finish</b>.</p><p>You have now created a class in which you can write code. In the next lesson, we will write a simple Java program. See you there!</p>
	"]]>
	</string>

    <!-- ########################################## LESSON 102 ###################################### -->

    <string name="lesson_102_1_title">Time to code</string>
    <string name="lesson102_1"><![CDATA["
	<p>Let's start with the most basic program you can write: the <font bgcolor="green">Hello World</font> program. Create a new project with one class named <font color="#987654"><i>MyFirstApp</i></font>. Don't know how to do that? Check <a href="101_5">lesson 1 on how to create a project</a></p>
<p>You should now be able to write code inside the <font color="#987654"><em>MyFirstApp</em></font> class. Write the following code:</p>
<p>
<font color="#008000">public class</font> <font color="#1aa3ff"><em>MyFirstApp</em></font> { <br>
	&nbsp;&nbsp;&nbsp;<font color="#008000">public static</font> <font color="#B00040">void</font> <font color="#1aa3ff"><em>main</em></font>(<font color="black">String</font>[] <font color="#a300cc">args</font>) { <br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println( <font color="#a300cc">\"Hello World!\"</font> ); <br>
	&nbsp;&nbsp;&nbsp;}<br>
}
</p>
<p>In the next sections we will run the program and then explain what every line does.</p>
"]]></string>

    <string name="lesson_102_2_title">Run your program</string>
    <string name="lesson102_2"><![CDATA["
	<p>In order to run this program just click the green button at the top. Alternatively, you can use the menu at top. Click <b>Run &gt; Run</b> (or press CTRL+F11)</p>

<p>If a dialog appears asking you to save, click <b>OK</b>. The program will now execute. You should see the words <font color="#555">"Hello World!"</font> around the bottom area of Eclipse</p>

<p>If there were <font color="red"><em>errors</em></font> in your code, a dialog will show up, warning you about them. Go <a href="102_1">back</a> and check that you didn't mispelled anything in your code.</p>
	"]]></string>

    <string name="lesson_102_3_title">What does it do?</string>
    <string name="lesson102_3"><![CDATA["
		<p>Let's see what every line of code does:</p>
<p>The first line of code: <br><font color="#008000">public class</font> <font color="#1aa3ff"><em>MyFirstApp</em></font></p>
<p>This line declares a <font color="#008000">class</font> named <font color="#1aa3ff"><em>MyFirstApp</em></font> and makes it <font color="#008000">public</font>.</p>
<p>
What is a class and a public class? For now, that is not important. All programs in Java run inside a class so we'll have write them like this. You'll learn about what classes are in <a href="301">Chapter III</a>.</p>
	"]]></string>

    <string name="lesson_102_4_title">The main function</string>
    <string name="lesson102_4"><![CDATA["
<p>The second line of code was:<br>
<font color="#008000">public static</font> <font color="#B00040">void</font> <font color="#1aa3ff"><em>main</em></font>(<font color="black">String</font>[] <font color="#a300cc">args</font>)</p>

<p>This line declares a function named <font color="#1aa3ff">main</font>. It also declares this function as <font color="#008000">public</font>, <font color="#008000">static</font>, and <font color="#B00040">void</font>. Inside the parentheses, there's the function's parameter <font color="black">String</font>[] <font color="#a300cc">args</font>. You'll learn about the meaning of all these in <a href="108_1">Lesson 8</a>.</p>

<p>However, it's important to understand that every program starts inside this function. The function name is always <font color="#1aa3ff"><em>main</em></font> and has to be declared exactly like we did above. There can be ONLY ONE <font color="#1aa3ff"><em>main</em></font> function in every program and it is ALWAYS inside a class. When you execute the program, the code inside the <font color="#1aa3ff"><em>main</em></font> function will be executed.</p>

<p>If we don't write anything inside, nothing will happen.</p>
	"]]></string>

    <string name="lesson_102_5_title">Saying hello</string>
    <string name="lesson102_5"><![CDATA["
<p>The last line of code that needs explaining is this:<br>
System.out.println( <font color="#a300cc">\"Hello World!\"</font> ); <br>
</p>

<p>This line will output/print to the screen the words \"Hello World!\" (without the quote marks ").</p>

<p>We can print anything to screen using the command function:<br> System.out.println( <font color="#a300cc">\"Your message here\"</font> );</p>

<p><b>Note</b> the <b>;</b> at the end.</p> 

<p>You can print your own message to screen, or even print more messages by calling the printing function multiple times:<br>
System.out.println( <font color="#a300cc">\"This is a message\"</font> );<br>
System.out.println( <font color="#a300cc">\"And this is another message\"</font> );</p>

<p>Try it! Print your own messages to the screen. Remember that these must be written inside the <font color="#1aa3ff">main</font> function.</p>
	"]]></string>

    <string name="lesson_102_6_title">There\'s more to it</string>
    <string name="lesson102_6"><![CDATA["
<p>Java is a powerful language and there's more to it than just printing messages on the screen. In the next lesson, you are going to learn a very important concept: <font color="blue"><big>variables</big></font>.</p>

<p>Remember: if there is something unclear, you can always go back and reread any part of any lesson. When your ready, proceed to the <a href="301">next lesson: Variables</a></p>
	"]]></string>


    <!-- ########################################## LESSON 103 ###################################### -->


    <string name="lesson_103_1_title">Introduction to variables</string>
    <string name="lesson103_1"><![CDATA["
<p>Variables are places where we can store data. You can think of them like buckets. Except you have to define what kind of data you can store in a variable.</p>

<p>In Java, there are 8 Primitive Data Types. Other than these, there are the Object Data Types, which are a bit harder to understand for now, since they deal with classes. We will however, use some of them as they are build into Java's standard library.</p>

<p>Let's start with the Primitive Data Types. Tap next to continue.</p>
    "]]></string>
    <string name="lesson_103_2_title">Primitive types</string>
    <string name="lesson103_2"><![CDATA["
<p>We will start with the Primitive Data Types as they are going to be used for basic operation. They can store data such as numbers, characters and true/false values.</p>
<p>
1. byte (integer ~ 1 byte)<br>
2. short (integer ~ 2 bytes)<br>
3. int  (integer ~ 4 bytes)<br>
4. long (integer ~ 8 bytes)<br>
5. float (float number ~ 4 bytes)<br>
6. double (float number ~ 8 bytes)<br>
7. char (character ~ 2 bytes)<br>
8. boolean (true or false)
</p>

<p>You can click on a type for more information about it. Seem like too many? Don't worry, you're not going to use all of them all the time. Next, let's see how you can declare a variable and print it to the screen.</p>

    "]]></string>
    <string name="lesson_103_3_title">Using a variable</string>
    <string name="lesson103_3"><![CDATA["
<p>To declare a variable, all you have to do is write the variable type followed by a variable name, like this:<br>
int myVariable;</p>

<p>Things to remember about variables:<br>
&nbsp;&nbsp;- both the variable type and the name are case-sensitive<br>
&nbsp;&nbsp;- you can't declare two variables with the same name in the same program<br>
&nbsp;&nbsp;- the variable name cannot start with a number and cannot contain spaces. <br>
</p>
<p>
Once a variable is declared you can assign values to that variable like this:<br>
myVariable = 12;</p>

<p>Finally, you can print the data inside the variable using the function from the previous lesson, like this:<br>
System.out.println(myVariable);</p>

<p>Note that we wrote the variable name with no quotes. We only use quotes when we want to print a text message. When we want to print what is inside a variable, we only write the variable name with no quotes.</p>
    "]]></string>
    <string name="lesson_103_4_title">Full program</string>
    <string name="lesson103_4"><![CDATA["
<p>You code should look like this:</p>

<p>public class MyProgram { <br>
	&nbsp;&nbsp;public static void main(String[] args) { <br>
		&nbsp;&nbsp;&nbsp;&nbsp;int myVariable;<br>
		&nbsp;&nbsp;&nbsp;&nbsp;myVariable = 12;<br>
		&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(myVariable);<br>
	&nbsp;&nbsp;}<br>
}</p>

<p>Running the code above will output the number 12 on the screen.</p>
    "]]></string>
    <string name="lesson_103_5_title">Numbers, Integers</string>
    <string name="lesson103_5"><![CDATA["
<p>Integer (int) variables will be especially useful when we're going to use loop statements in lesson 7. Let's play with them for a bit more. The following code will give myVariable the value of 4:<br>

myVariable = 2+2;</p>

<p>As you can see, Java will perform the operation on the right side of the = (equal sign) and the result will be stored in our variable. We can also do this:<br>

myVariable = 2;<br>
myVariable = 3 + myVariable;</p>

<p>The first line of code will assign the value of 2 to myVariable. The second line will assign to myVariable the result of the operation 3+myVariable. Since myVariable had a value of 2, the operation performed will be 3+2. Therefore, the value assigned to myVariable will now be 5. As you can see, when attempting to solve these operation, you should just replace the variable with the value it has.</p>

<p>You can also try the operators: - (substitution), * (multiplication) and / (division). </p>
    "]]></string>
    <string name="lesson_103_6_title">Other primitives</string>
    <string name="lesson103_6"><![CDATA["
<p>We'll ignore the byte, short and long data types for now as the only difference between them and the int type is the highest number they can store. The int data type can store numbers between -2,147,483,648 to 2,147,483,647. The range of byte and short types are smaller than int while the long type has an bigger range than int.</p>

<p>To store decimal numbers we will use the double data type. Try to create a double variable in your program. For example:<br>
double aNumber;<br>
aNumber = 4.57;</p>

<p>Note that you can also directly define a variable like this:<br>
double aNumber = 4.57;</p>

<p>This is called initialization. You can do this with any primitive data type.</p>

<p>A float variable works the same as a double except you have to add an f at the end of the number:<br>
float aFloatVar = 4.57f;</p>

<p>They have less precision than a double (you can write less numbers after the decimal point). It's recommended to NOT use float unless you have to.</p>

<p>A boolean can store only 2 values: true or false. Your going to learn the purpose of this in lesson 5.</p>
    "]]></string>
    <string name="lesson_103_7_title">Characters, Strings, Objects</string>
    <string name="lesson103_7"><![CDATA["
<p>The last primitive type is char. You can store a single character inside a char:<br>
char myVar = 'b';</p>

<p>It is very important that the character is surrounded by single quotation marks.</p>

<p>What if you want to store a sentence inside a variable? Well, to do that we are going to use one important Object Data Type: the String. This is a very special and very useful data type. Unlike other Object data types, Java allows using String almost like a primitive type. Therefore, to declare a String you can write:<br>
String myStrVar = \"This is a sentence\";</p>

<p>Make sure you write String with a capital S. As you learned earlier, these are case-sensitive. </p>

<p>Go ahead and try playing with these primitive data types for a bit. Declare them, give them values and print them to screen.</p>

In the next lesson, we are going to store values inside variables based on user input.
    "]]></string>


    <!-- ########################################## LESSON 104 ###################################### -->


    <string name="lesson_104_1_title">User input</string>
    <string name="lesson104_1"><![CDATA["
<p>Sometimes in your program you will want to read user input. You will read that user input, store it in a variable and do something with it.</p>

<p>In Java, there are many ways to read user input, but we'll go with one of the easiest. In this lesson we are going to use an Object Data Type variable called Scanner. To use this object, we first have to import it in our program. This is done like this:</p>

<p>import java.util.Scanner;</p>

<p>The import statements are written above the class. The above code will import the Scanner object which is inside the java.util library.</p>
    "]]></string>
    <string name="lesson_104_2_title">Using a Scanner</string>
    <string name="lesson104_2"><![CDATA["
<p>Now that we imported the Scanner object, we can use it in our program. Inside our program's main function we are going to declare a Scanner variable like this:</p>

<p>Scanner reader = new Scanner(System.in);</p>

<p>What we did here is declare a variable named reader as Scanner. Then we assign to it a new Scanner object that reads from System.in (which is keyboard input). This is how most Object Data Type variables are declared. In the previous lesson, we learned that String is an exception to this rule. We can directly assign strings to a String data type, but we could also do this:</p>

<p>String mystr = new String("This is a string");</p>
    "]]></string>
    <string name="lesson_104_3_title">Reading a number</string>
    <string name="lesson104_3"><![CDATA["
<p>We declared our Scanner variable. Now, we can use it to read user input. However, we need a place to store it so we are going to have to declare a variable to store it. Let's assume the input we're going to receive is a number. We will store it in an int variable.</p>

<p>int number;</p>

<p>Next, we are going to use the Scanner to read the user input and store it into the number variable.</p>

<p>number = reader.nextInt();</p>

<p>nextInt() is a function belonging to the Scanner object. You can access these functions only through a variable of the Scanner type. This function will read the next user input as int and store it in the number variable.</p>

<p>You can then print the result on the screen like this:</p>

<p>System.out.println("The number is:");<br>
System.out.println(number);</p>

<p>Next, let's run this program.</p>
    "]]></string>
    <string name="lesson_104_4_title">Review</string>
    <string name="lesson104_4"><![CDATA["
<p>The final program should look like this:</p>

<p>import java.util.Scanner;</p>

<p>public class MyFirstApp { <br>
   &nbsp;&nbsp;public static void main(String[] args) { <br>
	   &nbsp;&nbsp;&nbsp;&nbsp;Scanner reader = new Scanner(System.in);<br>
	   &nbsp;&nbsp;&nbsp;&nbsp;int number;<br>
	   <br>
	   &nbsp;&nbsp;&nbsp;&nbsp;number = reader.nextInt();<br>
	   <br>
	   &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"The number is:\");<br>
	   &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(number);<br>
	   
   &nbsp;&nbsp;}<br>
}</p>

<p>Run the program. In the console (at the bottom area of the screen), write a number and press enter (you might have to click inside the console to write). The number should be printed on the screen along with the message "The number is:".</p>
    "]]></string>
    <string name="lesson_104_5_title">One keyboard Scanner only</string>
    <string name="lesson104_5"><![CDATA["
<p>Even though you can declare multiple Scanner variables inside your program (and at some point you might have to), it's best if you don't declare more than one for now. In the next lessons, if we will require user input, we're going to declare a Scanner at the beginning of the program, that reads input from System.in and use it for the rest of the program.</p>

<p>Typically, the Scanner should be closed after we're done using it. However, we're not going to do that in these lessons. Once a Scanner that reads from System.in (keyboard) is closed, it cannot be used anymore and it cannot be "reopened".</p>

<p>In later lessons, we might use Scanner for reading files. In this case the Scanner should be closed after it is done reading.</p>
    "]]></string>
    <string name="lesson_104_6_title">Read more</string>
    <string name="lesson104_6"><![CDATA["
<p>What if we want to read something else? We could read a double (or float) by declaring a variable with that type and using the correct function to read it (nextDouble() for example). Reading a character is trickier: there's no function called nextChar() in a Scanner object. </p>

<p>Reading a String is much easier. Declare a String variable and use the nextLine() function:</p>

<p>String str;<br>
str = reader.nextLine();</p>

<p>You will now be able to input a string in your program. Go ahead and try to read a string and print it.</p>

<p>Finally to read a character we can use a trick: read the first letter of a string. We can do that like this:</p>

<p>char ch = reader.nextLine().charAt(0);</p>

<p>The function charAt() will return/give back a character inside a string based on position. We use the 0th position because in the programming world, the counting starts at 0 instead of 1. So we basically tell the function to give us the first character in the string that the user has given to us.</p>
    "]]></string>
    <string name="lesson_104_7_title">More ways</string>
    <string name="lesson104_7"><![CDATA["
<p>The Scanner object is one of the many ways to read data from user input. In chapter II, we will come back to Scanner and use it to read files from your computer. You'll also learn new objects for reading user input and files.</p>

<p>If things are starting to feel complicated, you might want to take a break and practice what you've learned so far. In following lessons, we are going to expand on what you've learned so far. You're also going to learn about Conditionals and Loops, two very useful concepts.</p>
    "]]></string>

    <!-- ########################################## LESSON 105 ###################################### -->


    <string name="lesson_105_1_title">Decisions, decisions</string>
    <string name="lesson105_1"><![CDATA["
<p>Let's assume you want to ask the user to enter two numbers. You will then compare the numbers and display a message saying which number is greater.</p>

<p>To do that you have to make a decision: output that the first number is greater or output that the second number is greater.</p>

<p>In Java, this is done using the if statement.</p>
    "]]></string>
    <string name="lesson_105_2_title">The if statement</string>
    <string name="lesson105_2"><![CDATA["
<p>The if statement looks something like this:</p>

<p>if(condition) {<br>
 &nbsp;&nbsp;//if the condition is true, execute all the commands in here.<br>
} </p>

<p>The condition is an expression that can evaluate to true or false. If the condition is true, the code between brackets is executed. Otherwise it's ignored. For example:</p>

<p>if(6>4) {<br>
	&nbsp; &nbsp;System.out.println("This is inside if");<br>
}<br>
System.out.println("This is outside if and it will execute everytime");</p>

<pThe code above will print both messages. However, if we change the condition from 6>4 to 6<4, the first message won't be printed anymore because, obviously, 6 is not smaller that 4.</p>
    "]]></string>
    <string name="lesson_105_3_title">What else?</string>
    <string name="lesson105_3"><![CDATA["
<p>We can also have instructions that execute only if the condition is false. This is called the if else statement and it looks like this:</p>

<p>if(condition) {<br>
 &nbsp;&nbsp;//if condition is true, execute all commands in here<br>
}<br>
else {<br>
&nbsp;&nbsp;//if condition is false, execute all commands in here<br>
}</p>

<p>We can now make a program that compare two numbers and outputs the result. Consider the following program:</p>

<p>int a=3;<br>
int b=9;<br>
<br>
if(a&gt;b) {<br>
	&nbsp;&nbsp;System.out.println(\"a is greater than b\");<br>
}<br>
else {<br>
	&nbsp;&nbsp;System.out.println(\"b is greater than a\");<br>
}</p>

<p>Running the above program will output "b is greater than a". You can play with the values of a and b, change them and see how the result changes.</p>
    "]]></string>
    <string name="lesson_105_4_title">More decisions</string>
    <string name="lesson105_4"><![CDATA["

<p>There's one last thing missing in our program. What if the numbers are equal? To handle this, we are going to use the else-if statement. </p>

<p>if(condition) {<br>
 &nbsp;&nbsp;//execute this if condition is true<br>
}<br>
else if(anotherCondition) {<br>
 &nbsp;&nbsp;//if condition is false, but anotherCondition is true, execute this<br>
}<br>
else {<br>
 &nbsp;&nbsp;//if no conditions are true, execute this<br>
}</p>

<p>This allows us to specify another condition that might be true and another set of instruction to execute if it is true. However you have to keep in mind that each code is executed from top to bottom. Therefore, if the first condition is true then the other conditions are ignored even if they might true aswell. In the next section, we'll explain this with examples.</p>

    "]]></string>
    <string name="lesson_105_5_title">Compare numbers</string>
    <string name="lesson105_5"><![CDATA["
<p>Let's start by implementing our number compare program using this big form of if statement:</p>

<p>int a=3;<br>
int b=9;<br>
<br>
if(a&gt;b) {<br>
 &nbsp;&nbsp;System.out.println("a is greater than b");<br>
}<br>
else if(a==b) {<br>
 &nbsp;&nbsp;System.out.println("a and b are equal");<br>
}<br>
else {<br>
 &nbsp;&nbsp;System.out.println("b is greater than a");<br>
}
</p>

<p>Note the operator for checking if the variables are equal is == (two equal signs). The operator = (single equal sign) is used only to assign values. Writing a=b would assign the value of b to a. In the above case, a would become 9. That would mess up our program and we would end up getting the wrong output.</p>
    "]]></string>
    <string name="lesson_105_6_title">First come, first served</string>
    <string name="lesson105_6"><![CDATA["
<p>The order of conditions is important. Let's introduce two more operators in order to explain this: <br>
 &lt;= (the greater than or equal sign) and &gt;= (the lesser than or equal sign). </p>

<p>Now, change the condition in the if statement from a>b to a>=b. What you will notice is that when a and b are equal, both the first (a>=b) and the second condition (a==b) are true. </p>

<p>However, only the first message is printed to the screen. That is because the if statement only takes the first condition that it finds true and executes it, ignoring everything else.</p>
    "]]></string>
    <string name="lesson_105_7_title">Booleans</string>
    <string name="lesson105_7"><![CDATA["
<p>Another way to write conditions is to use the boolean variables we've seen in lesson 3. Remember that a boolean variable can only store two values: true or false.</p>

<p>In an if condition we can test whether a boolean variable is true or false using the == sign. </p>
<p>
boolean payedTheBills = false;<br>
if(payedTheBills == false) {<br>
 &nbsp;&nbsp;System.out.println(\"Go ahead and pay them!\");<br>
}<br>
else {<br>
 &nbsp;&nbsp;System.out.println(\"Nothing to worry about.\");<br>
}<br>
</p>
<p>The above program will output the first message: \"Go ahead and pay them!\". That is because the variable payedTheBills is false and we check if it's equal to false. The idea here is that false==false evaluates to true (for obvious reasons). And since it evaluates to true, the first message in the if statement is executed.</p>
    "]]></string>
    <string name="lesson_105_8_title">Logic makes sense</string>
    <string name="lesson105_8"><![CDATA["

<p>For some people, these logic concept might seem new and difficult to grasp. Statements such as false==false evaluates to true might seem weird at first. However, in time it will start making sense (if it doesn't already).</p>

<p>It's important to be able to write a program in a way that you understand it. Therefore, let's discuss a couple more ways to write our previous "Paying the bills" program. </p>

<p>First, we'll introduce one more sign: the != (not equal sign). This test if the first is NOT equal to the second. For example:</p>

<p>8 != 10 evaluates to true: 8 is indeed not equal to 10</p>

<p>7 != 7 evaluates to false: 7 is equal to 7. Saying that they are not equal is false</p>
    "]]></string>
    <string name="lesson_105_9_title">Same result, different condition</string>
    <string name="lesson105_9"><![CDATA["
<p>Now let's see a couple more different ways to rewrite our "Paying the bills" program. First, instead of testing if payedTheBills is false, we could test if it is true and swap the two messages:</p>

<p>if(payedTheBills == true) {<br>
 &nbsp;&nbsp;System.out.println("Nothing to worry about.");<br>
}<br>
else {<br>
 &nbsp;&nbsp;System.out.println("Go ahead and pay them!");<br>
}
</p>
<p>We could also write the above with the condition <br>

if(payedTheBills != false) {</p>

<p>Finally, we could only write the variable name inside the condition like this <br>

if(payedTheBills) {</p>

<p>Since the variable can only be true or false, the condition can be considered true if the variable is true and false if the variable is false.</p>
    "]]></string>
    <string name="lesson_105_10_title">End if</string>
    <string name="lesson105_10"><![CDATA["
<p>In chapter II we'll return to if statements and we'll introduce some more useful operators. We'll also discuss about other ways of decision making in Java, such as using the conditional operator or switch-case statements.</p>

<p>In following lessons you'll learn about loops and arrays. Before moving on, make sure you understand what you've learned so far.</p>
    "]]></string>

    <!-- ########################################## LESSON 106 ###################################### -->


    <string name="lesson_106_1_title">Dealing with too much</string>
    <string name="lesson106_1"><![CDATA["
<p>Arrays exist to make our work easier when dealing with lots of elements. Imagine you want to store a number in your program. You'd declare an int variable and store that number there.</p>

<p>But what if you want to store 200 numbers? You could declare individual variables for each number. However, there's an easier way: using arrays. Let's take an example.</p>
    "]]></string>
    <string name="lesson_106_2_title">Array instead of variable</string>
    <string name="lesson106_2"><![CDATA["
<p>We want to store 5 ints. We could write:</p>
<p>
int number1;<br>
int number2;<br>
int number3;<br>
int number4;<br>
int number5;</p>

<p>Using an array, we can rewrite the above code like this:</p>

<p>int[] number = new int[5];</p>

<p>This means that we have an int variable named number that can store not one but five ints. Using arrays is a more convenient way to store collections of data.</p>
    "]]></string>
    <string name="lesson_106_3_title">Asigning</string>
    <string name="lesson106_3"><![CDATA["
<p>Now, we can assign a value to any element of the array like this:</p>

<p>number[2] = 1234;</p>

<p>This assigns the number 1234 as the value of the 3rd element in the array. Remember that the counting start at 0, therefore the third element is at index 2, not 3.</p>

<p>number[0] = 33; //Sets the first element to be 33<br>
number[4] = 254; //Sets the last element to be 254</p>
    "]]></string>
    <string name="lesson_106_4_title">Confusing declaration</string>
    <string name="lesson106_4"><![CDATA["

<p>So what about number[5]? If we use the indexes from 0 to 4 to store the five numbers, why did we declare the array with new int[5] instead of new int[4]?</p>

<p>When we declare an array, we specify the size of the array inside the square brackets. This means that if we want to store 5 ints, we will declare the array new int[5]. What is confusing for beginners, is the use of the square brackets both when we define the array size and when we want to access (or assign) an element inside it. In both cases square brackets [] are used.</p>

<p>In practice, the array of five elements we declared using new int[5] has the following array elements:<br>
number[0], number[1], number[2], number[3], number[4].</p>

<p>It has five elements which is the way we intended. The element number[5] does NOT exist.</p>
    "]]></string>
    <string name="lesson_106_5_title">Accessing</string>
    <string name="lesson106_5"><![CDATA["
<p>Accessing an array is as easy as assigning a value to it. Let's print to screen the value of number[2].</p>

<p>System.out.println(number[2]);</p>

<p>If we don't assign a value to number[2] it will print the default value 0.</p>

<p>Trying to print the entire array like this:</p>

<p>System.out.println(number);</p>

<p>This will print a series of letters and numbers that won't mean anything to you. In order to print the elements of an array (in a certain order), we are going to have to use loops. In the next lesson, we will learn about loop statements and how to use them to print arrays.</p>
    "]]></string>

    <!-- ########################################## LESSON 107 ###################################### -->


    <string name="lesson_107_1_title">Again and again</string>
    <string name="lesson107_1"><![CDATA["
<p>Loops can be used to execute the same piece of code multiple times. Just like decision making, loops are very important. You will use loops in almost every program that you'll write.</p>

<p>Loops are especially useful when working with arrays. In this lesson, we are going to learn the two loop statements that Java has: for and while.</p>
    "]]></string>
    <string name="lesson_107_2_title">The while loop</string>
    <string name="lesson107_2"><![CDATA["
<p>The while statement looks very similar to the if statement. Its general form is:</p>

<p>while(condition) {<br>
 &nbsp;&nbsp;//Execute the code in here<br>
}</p>

<p>If the condition is true, the code inside the brackets will execute. Unlike the if statement, this code will keep executing over and over again until the condition becomes false.</p>

    "]]></string>
    <string name="lesson_107_3_title">Looping forever</string>
    <string name="lesson107_3"><![CDATA["

<p>It is very important to make sure we don't get trapped inside a neverending loop. The code that will execute inside the while loop, should at some point have an instruction that will change the condition to become false.</p>

<p>If you enter a neverending loop, your program will freeze and become unusable and you will have to force your program to quit (by ending the process). In some cases, the program will crash and quit on it's own.</p>
    "]]></string>
    <string name="lesson_107_4_title">Counting</string>
    <string name="lesson107_4"><![CDATA["
<p>
Let's write a counting program. Our program will count from 1 to 10 and then will print a message on the screen. The following goes into the main function:</p>

<p>int i=1;<br>
while(i<=10) {<br>
	&nbsp;&nbsp;System.out.println(i);<br>
	&nbsp;&nbsp;i++;<br>
}<br>
System.out.println("Done counting.");</p>

<p>In the next sections, we'll explain the code line by line.</p>
    "]]></string>
    <string name="lesson_107_5_title">Program explained</string>
    <string name="lesson107_5"><![CDATA["
<p>You should already know what the first line does:<br>
int i=1;</p>

<p>Declares a variable i and initialises it with 1.</p>

<p>On the second line starts the while statement. The condition state that the code should be execute while i is less than or equal to 10.</p>

<p>The third line simply prints the value that i has.</p>

<p>An important instruction is on the fourth line: i++. This is the equivalent of doing:<br>
i = i+1</p>

<p>It increments i by 1. Now, all the code inside the while loop was executed and the condition is checked again. This time i has a value of 2 because we incremented it. The condition remains true and all the code will execute again. This time, the third line will print 2. Then, i will be incremented once again and will have a value of 3.</p>

<p>This repeats until i will become 11. When that happens, once the condition is verified again, it will now be false. Therefore, the code inside the brackets will not execute anymore. The program will then continue normally and execute the rest of the instructions outside of the while statement. </p>

<p>In our case, it will print the message: Done counting.</p>
    "]]></string>
    <string name="lesson_107_6_title">For loop</string>
    <string name="lesson107_6"><![CDATA["
<p>Next, let's discuss the for loop statement. This one is a bit trickier. The general form looks like this:</p>

<p>for(initialization; condition; update) {<br>
	<br>//Code here will execute while condition is true<br>
}</p>

<p>Besides the condition, the for loop allows us to write an instruction that will execute only the first time, as well as an instruction that will execute everytime the loop repeats. This means that we can write our previous counting program like this:
</p>

<p>for(int i=1; i<=10; i++) {<br>
	&nbsp;&nbsp;ystem.out.println(i);<br>
}<br>
System.out.println("Done counting.");</p>

<p>In the above for loop, the instruction int i=1 will execute only once, at the beginning of the loop. The i++ instruction will execute each time after all instructions inside the for loop execute. The condition works the same: while it is true, the instructions inside will keep executing.</p>

    "]]></string>
    <string name="lesson_107_7_title">Printing an array</string>
    <string name="lesson107_7"><![CDATA["
<p>
Let's make a different program now. One that prints the elements of an array. We are going to use the for statement to do that.
</p>
<p>
First, let's declare a 5 element array. It will hold integers.
</p>

<p>int[] n = new int[5];</p>

<p>At this point, all five elements inside the array are 0. You can individually assign other numbers to the elements in the array like we discussed before:</p>

<p>n[2] = 36; //Set the third element to 36</p>

<p>However, we can use a loop to set all elements in the array to some value.</p>

<p>for(int i=0;i<5;i++) {<br>
 &nbsp;&nbsp;n[i] = i;<br>
}</p>

<p>The code above makes i go from 0 to 4 and each time, it sets the ith element of the array to the value of i.  It's the equivalent of this:</p>
<p>
n[0] = 0;<br>
n[1] = 1;<br>
n[2] = 2;<br>
n[3] = 3;<br>
n[4] = 4;<br>
</p>
<p>Obviously, when we have to deal with 100 numbers, the above solution is too much work and the only efficient way is to use a loop.</p>

    "]]></string>
    <string name="lesson_107_8_title">Printing an array part 2</string>
    <string name="lesson107_8"><![CDATA["
<p>
Now that our n array has elements, let's print the array. In the previous lesson you learned that you CAN NOT do this:
</p>
<p>System.out.println(n);</p>

<p>This prints something useless. Instead, to print the array we'll use a loop:</p>

<p>for(int i=0; i<5; i++) {<br>
 &nbsp;&nbsp;System.out.println(n[i]);<br>
}</p>

<p>This way, each element is printed to the screen. Remember that we go from the 0th element to the 4th element. This is done by starting with i from 0 and repeating while i<5 (i is stricly lesser than 5) or i<=4 (i is lesser than or equal to 4).</p>
    "]]></string>
    <string name="lesson_107_9_title">Get the length</string>
    <string name="lesson107_9"><![CDATA["
<p>
A better way to write conditions when iterating through an array is using the length property of the array. This gives us the exact length of the array.
</p>
<p>
for(int i=0;i<n.length;i++) {<br>
 &nbsp;&nbsp;System.out.println(n[i]);<br>
}</p>

<p>We accessed the length property of our n array. This is equal to 5, therefore writing i<n.length is like writing i<5. This is useful because if you decide to change the number of elements of n, you no longer have to change the loop condition to match it.</p>

    "]]></string>
    <string name="lesson_107_10_title">Put a break on it</string>
    <string name="lesson107_10"><![CDATA["

<p>So far, you learned that loops stop once the condition becomes false. There's also a way to stop a loop using a special instruction: break. When you break a loop, no other instruction inside the loop will get execute. </p>
<p>
while(condition) {<br>
  &nbsp;&nbsp;//... some instructions up here ...<br>
  &nbsp;&nbsp;break;<br>
  &nbsp;&nbsp;//... instructions here but they won't execute, condition doesn't matter<br>
}<br>
//... instructions outside the loop, execute when loop is finished<br>
</p>
<p>
The break instruction works only inside loops. It's typically used with an if statement. This way, you can break the loop only in certain situations (that do not depend on the loops condition).</p>

    "]]></string>

    <string name="lesson_107_11_title">To be continued</string>
    <string name="lesson107_11"><![CDATA["
<p>In the next chapter, we will come back to the break instruction to learn more about it. You'll also learn about the continue keyword.</p>

<p>There are also a few more loop statements such as the do-while loop and another way to use the for loop known as for-each.</p>

    "]]></string>
    <string name="title_activity_settings">Settings</string>

    <!-- Strings related to Settings -->

    <!-- Example General settings -->
    <string name="pref_header_general">General</string>

    <string name="pref_title_social_recommendations">Enable social recommendations</string>
    <string name="pref_description_social_recommendations">Recommendations for people to contact
        based on your message history
    </string>

    <string name="pref_title_display_name">Display name</string>
    <string name="pref_default_display_name">John Smith</string>

    <string name="pref_title_add_friends_to_messages">Add friends to messages</string>
    <string-array name="pref_example_list_titles">
        <item>Always</item>
        <item>When possible</item>
        <item>Never</item>
    </string-array>
    <string-array name="pref_example_list_values">
        <item>1</item>
        <item>0</item>
        <item>-1</item>
    </string-array>

    <!-- Example settings for Data & Sync -->
    <string name="pref_header_data_sync">Data &amp; sync</string>

    <string name="pref_title_sync_frequency">Sync frequency</string>
    <string-array name="pref_sync_frequency_titles">
        <item>15 minutes</item>
        <item>30 minutes</item>
        <item>1 hour</item>
        <item>3 hours</item>
        <item>6 hours</item>
        <item>Never</item>
    </string-array>
    <string-array name="pref_sync_frequency_values">
        <item>15</item>
        <item>30</item>
        <item>60</item>
        <item>180</item>
        <item>360</item>
        <item>-1</item>
    </string-array>

    <string-array name="list_preference_entries">
        <item>Entry 1</item>
        <item>Entry 2</item>
        <item>Entry 3</item>
    </string-array>

    <string-array name="list_preference_entry_values">
        <item>1</item>
        <item>2</item>
        <item>3</item>
    </string-array>

    <string-array name="multi_select_list_preference_default_value" />

    <string name="pref_title_system_sync_settings">System sync settings</string>

    <!-- Example settings for Notifications -->
    <string name="pref_header_notifications">Notifications</string>

    <string name="pref_title_new_message_notifications">New message notifications</string>

    <string name="pref_title_ringtone">Ringtone</string>
    <string name="pref_ringtone_silent">Silent</string>

    <string name="pref_title_vibrate">Vibrate</string>
</resources>
